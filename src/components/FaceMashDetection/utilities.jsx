export const TRIANGULATTION = [
  351, 385, 1, 353, 370, -20, 352, 370, -5, 347, 336, -24, 354, 364, -23, 355,
  351, -25, 358, 311, -25, 282, 275, -13, 361, 283, -29, 362, 271, -34, 367,
  222, -46, 351, 388, 3, 351, 390, 5, 351, 390, 8, 352, 390, 11, 351, 394, 12,
  351, 398, 12, 351, 401, 15, 351, 403, 21, 353, 372, -16, 342, 366, -10, 242,
  210, -9, 318, 291, -14, 306, 290, -14, 294, 287, -13, 278, 275, -11, 325, 291,
  -14, 296, 262, -22, 309, 266, -22, 285, 261, -20, 277, 262, -18, 270, 277, -8,
  316, 398, 30, 276, 269, -12, 239, 248, 7, 257, 264, -7, 304, 331, -4, 339,
  382, 1, 341, 388, 5, 328, 380, 3, 322, 378, 6, 333, 385, 6, 327, 384, 9, 309,
  379, 18, 345, 368, -20, 344, 361, -23, 263, 250, -22, 325, 313, -12, 321, 350,
  -11, 321, 344, -11, 274, 317, -1, 345, 349, -24, 287, 252, -30, 272, 249, -27,
  252, 204, -22, 336, 274, -30, 320, 272, -19, 301, 372, 16, 255, 316, 51, 328,
  356, -7, 335, 361, -6, 314, 378, 15, 319, 380, 14, 267, 240, -27, 321, 351,
  -7, 307, 260, -31, 305, 253, -35, 297, 207, -42, 260, 223, -26, 303, 231, -39,
  257, 241, -20, 249, 227, -16, 340, 386, 3, 331, 383, 5, 325, 381, 7, 330, 358,
  -6, 317, 379, 14, 320, 382, 13, 320, 379, 14, 333, 360, -14, 329, 383, 10,
  335, 386, 8, 342, 388, 8, 339, 399, 21, 339, 398, 14, 340, 395, 12, 341, 391,
  11, 343, 388, 11, 329, 383, 11, 327, 384, 12, 324, 385, 12, 322, 386, 14, 312,
  367, 4, 243, 271, 39, 353, 371, -9, 325, 381, 12, 323, 382, 13, 339, 366, -4,
  324, 355, -2, 337, 364, -5, 316, 314, -9, 299, 316, -7, 320, 345, -7, 269,
  202, -33, 276, 224, -33, 283, 244, -33, 317, 386, 18, 333, 263, -35, 331, 240,
  -42, 329, 213, -46, 284, 281, -12, 258, 279, -4, 330, 290, -14, 268, 260, -15,
  332, 312, -15, 327, 353, -16, 247, 277, 2, 266, 290, -5, 280, 300, -8, 302,
  305, -9, 317, 305, -10, 326, 304, -12, 347, 310, -23, 250, 297, 8, 259, 255,
  -15, 348, 370, -16, 325, 325, -10, 238, 235, 20, 333, 303, -14, 320, 342, -3,
  273, 267, -12, 327, 345, -16, 247, 292, 46, 328, 287, -14, 335, 346, -21, 275,
  361, 36, 275, 361, 47, 241, 284, 23, 263, 343, 36, 244, 236, -4, 313, 403, 36,
  348, 369, -9, 317, 328, -7, 249, 260, -3, 295, 283, -14, 306, 286, -15, 317,
  381, 14, 253, 313, 16, 329, 416, 43, 302, 393, 44, 290, 379, 45, 365, 248,
  -41, 350, 423, 43, 316, 286, -15, 324, 286, -15, 328, 286, -14, 252, 247, -12,
  319, 278, -18, 308, 273, -19, 298, 270, -19, 287, 269, -18, 282, 269, -16,
  237, 220, 6, 288, 279, -14, 352, 374, -2, 319, 366, 1, 328, 356, -10, 338,
  371, -2, 360, 295, -26, 287, 376, 37, 300, 389, 37, 329, 415, 35, 264, 340,
  50, 325, 284, -16, 339, 324, -20, 350, 422, 36, 314, 406, 43, 245, 302, 30,
  335, 385, 11, 333, 387, 11, 331, 390, 12, 329, 392, 13, 327, 393, 19, 323,
  382, 11, 320, 380, 11, 317, 377, 10, 306, 369, 9, 267, 328, 10, 340, 310, -19,
  336, 285, -19, 329, 282, -17, 325, 381, 12, 267, 341, 24, 345, 291, -23, 321,
  395, 25, 356, 338, -25, 347, 324, -24, 357, 325, -25, 330, 335, -15, 350, 416,
  30, 351, 408, 26, 336, 404, 26, 298, 376, 22, 310, 345, 0, 308, 385, 24, 288,
  336, 0, 301, 351, 3, 280, 343, 8, 332, 410, 30, 325, 335, -10, 289, 375, 28,
  302, 386, 31, 290, 366, 18, 257, 325, 23, 278, 358, 22, 252, 321, 36, 295,
  358, 8, 331, 324, -15, 330, 358, -16, 324, 354, -10, 334, 357, -20, 327, 275,
  -23, 309, 265, -25, 293, 259, -25, 280, 257, -23, 272, 257, -20, 267, 266,
  -10, 239, 266, 15, 276, 284, -9, 288, 292, -10, 304, 296, -11, 317, 297, -12,
  326, 297, -12, 332, 297, -13, 241, 252, 31, 324, 355, -7, 338, 335, -20, 337,
  364, -18, 342, 366, -15, 337, 363, -16, 327, 357, -5, 344, 369, -16, 344, 368,
  -10, 332, 289, -14, 337, 294, -16, 339, 300, -17, 278, 270, -15, 273, 263,
  -15, 365, 340, -23, 437, 304, -7, 364, 370, -10, 482, 257, 1, 400, 306, -10,
  411, 309, -9, 422, 311, -8, 440, 305, -5, 393, 303, -11, 427, 288, -17, 414,
  287, -18, 437, 290, -14, 443, 294, -12, 446, 310, -1, 385, 410, 33, 443, 301,
  -6, 477, 293, 17, 460, 302, 1, 406, 349, 0, 363, 386, 2, 360, 391, 6, 375,
  387, 5, 380, 388, 9, 368, 391, 8, 374, 391, 11, 393, 393, 21, 362, 371, -19,
  364, 365, -23, 458, 287, -14, 389, 325, -9, 387, 362, -8, 388, 356, -8, 436,
  346, 5, 365, 352, -23, 437, 282, -25, 450, 284, -20, 475, 248, -13, 387, 285,
  -28, 402, 288, -16, 400, 389, 20, 451, 351, 60, 379, 365, -6, 370, 368, -5,
  387, 390, 18, 382, 390, 17, 456, 277, -20, 386, 363, -5, 417, 281, -28, 420,
  275, -31, 435, 235, -37, 466, 263, -18, 426, 256, -35, 465, 281, -12, 474,
  270, -7, 362, 389, 3, 371, 390, 6, 377, 390, 10, 376, 366, -4, 384, 390, 17,
  381, 392, 16, 382, 389, 17, 374, 367, -13, 372, 390, 12, 366, 390, 10, 358,
  391, 9, 363, 403, 22, 362, 402, 15, 362, 398, 13, 361, 394, 12, 360, 391, 11,
  373, 390, 14, 375, 392, 14, 377, 394, 14, 380, 396, 16, 392, 380, 8, 468, 312,
  49, 377, 390, 15, 379, 391, 15, 366, 371, -3, 382, 366, 0, 368, 370, -4, 397,
  329, -6, 413, 337, -2, 388, 357, -5, 461, 241, -26, 451, 258, -27, 442, 275,
  -27, 385, 397, 21, 392, 275, -33, 397, 253, -39, 405, 229, -44, 433, 309, -6,
  456, 315, 4, 389, 301, -11, 452, 296, -8, 383, 321, -13, 381, 363, -14, 466,
  318, 11, 447, 324, 2, 433, 328, -2, 412, 325, -4, 399, 319, -7, 390, 316, -9,
  369, 314, -22, 460, 335, 16, 460, 293, -7, 359, 372, -16, 387, 336, -8, 480,
  281, 31, 383, 313, -12, 389, 354, 0, 446, 300, -5, 382, 355, -14, 462, 330,
  56, 391, 299, -11, 374, 353, -20, 428, 387, 42, 427, 387, 54, 469, 326, 33,
  441, 373, 44, 477, 280, 6, 388, 415, 39, 357, 371, -9, 394, 342, -4, 468, 301,
  6, 422, 307, -9, 412, 305, -10, 384, 392, 17, 455, 349, 25, 371, 423, 45, 399,
  409, 48, 411, 400, 51, 403, 302, -11, 396, 299, -11, 392, 298, -11, 468, 289,
  -3, 402, 294, -14, 413, 293, -15, 423, 295, -14, 433, 297, -12, 438, 300, -10,
  484, 267, 16, 430, 306, -8, 385, 378, 4, 379, 365, -8, 366, 376, -1, 414, 398,
  42, 401, 406, 41, 371, 422, 37, 440, 370, 58, 395, 297, -12, 374, 330, -18,
  386, 418, 46, 463, 341, 39, 368, 391, 12, 369, 393, 13, 371, 396, 13, 372,
  400, 15, 375, 401, 21, 378, 390, 14, 381, 390, 14, 385, 389, 13, 397, 385, 13,
  440, 358, 17, 376, 317, -17, 384, 294, -17, 391, 294, -14, 376, 389, 14, 438,
  371, 31, 375, 296, -22, 380, 405, 27, 367, 328, -23, 380, 344, -13, 365, 408,
  27, 404, 394, 26, 397, 361, 3, 393, 400, 27, 419, 359, 5, 404, 369, 7, 425,
  369, 13, 369, 416, 31, 385, 345, -8, 412, 396, 33, 399, 403, 34, 412, 387, 23,
  449, 359, 32, 425, 383, 28, 455, 357, 45, 409, 378, 12, 381, 333, -13, 378,
  366, -14, 383, 365, -8, 374, 364, -18, 395, 288, -20, 414, 286, -21, 430, 286,
  -20, 442, 289, -17, 449, 292, -13, 451, 301, -3, 474, 310, 25, 439, 315, -2,
  427, 318, -4, 412, 316, -6, 399, 311, -8, 391, 308, -10, 386, 307, -11, 474,
  295, 41, 382, 365, -5, 373, 342, -18, 370, 369, -17, 364, 370, -14, 370, 369,
  -15, 380, 366, -3, 362, 372, -15, 361, 371, -9, 387, 299, -12, 381, 303, -14,
  378, 307, -16, 441, 301, -8, 447, 296, -8,
];

// export const drawMesh = (predictions, ctx, image) => {
//   if (predictions.length > 0) {
//     const imageWidth = 50; // Width of the face image
//     const imageHeight = 50; // Height of the face image
//     predictions.forEach((prediction) => {
//       const keypoints = prediction.scaledMesh;
//       for (let i = 0; i < keypoints.length; i++) {
//         const x = keypoints[i][0];
//         const y = keypoints[i][1];
//         ctx.beginPath();
//         ctx.arc(x, y, 1, 0, 3 * Math.PI);
//         ctx.fillStyle = "aqua";
//         ctx.fill();
//         // Draw the face image at the keypoint location

//         ctx.drawImage(
//           image,
//           x - imageWidth / 2,
//           y - imageHeight / 2,
//           imageWidth,
//           imageHeight
//         );
//       }
//     });
//   }
// };

// const drawPath = (ctx, points, closePath) => {
//     const region = new Path2D();
//     region.moveTo(points[0][0], points[0][1]);
//     for (let i = 0; i < points.length; i++) {
//       const point = points[i];
//       region.lineTo(point[0], point[1]);
//     }
//     if (closePath) {
//       region.closePath();
//     }
//     ctx.strokeStyle = "pink";
//     ctx.stroke(region);
//   };

  export const drawMesh = (predictions, ctx) => {
    if (predictions.length > 0) {
      predictions.forEach((prediction) => {
        if (prediction.scaledMesh) {
          const keypoints = prediction.scaledMesh;
        //   // Draw triangles
        //   for (let i = 0; i < TRIANGULATTION.length / 3; i++) {
            
        // const points = [
        //   TRIANGULATTION[i * 3],
        //   TRIANGULATTION[i * 3 + 1],
        //   TRIANGULATTION[i * 3 + 2],
        // ].map((index) => keypoints[index]);

        // drawPath(ctx, points, true);
        // }
        for (let i = 0; i < keypoints.length; i++) {
          const x = keypoints[i][0];
          const y = keypoints[i][1];
          ctx.beginPath();
          ctx.arc(x, y, 1, 0, 3 * Math.PI);
          ctx.fillStyle = "aqua";
          ctx.fill();
        }
      }
    });
  }
};
// export const drawMesh = (predictions, ctx, image) => {
//   if (predictions.length > 0) {
//     predictions.forEach((prediction) => {
//       const keypoints = prediction.scaledMesh;

//       // Draw the keypoints and connect them together
//       ctx.beginPath();

//       // Move to the first keypoint
//       const [x, y] = keypoints[0];
//       ctx.moveTo(x, y);

//       // Connect the keypoints with lines
//       for (let i = 1; i < keypoints.length; i++) {
//         const [x, y] = keypoints[i];
//         ctx.lineTo(x, y);
//       }

//       // Close the shape
//       ctx.closePath();

//       // Fill the shape with the face image
//       ctx.fillStyle = ctx.createPattern(image, "repeat");
//       ctx.fill();

//       // Draw the keypoints as circles
//       keypoints.forEach(([x, y]) => {
//         ctx.beginPath();
//         ctx.arc(x, y, 1, 0, 2 * Math.PI);
//         ctx.fillStyle = "aqua";
//         ctx.fill();
//       });
//     });
//   }
// };
